---
description: 
globs: 
alwaysApply: false
---
# File Organization

## Frontend Structure

```
src/
├── routes/                 # SvelteKit routes (pages)
│   ├── +layout.ts          # Layout for all routes
│   └── +page.svelte        # Main page component
├── lib/                    # Shared library code
│   ├── components/         # Reusable UI components
│   ├── stores/             # Svelte stores (state management)
│   ├── types/              # TypeScript type definitions
│   └── utils/              # Utility functions
└── app.html                # HTML template
```

## Backend Structure

```
src-tauri/
├── src/                    # Rust source code
│   ├── main.rs             # Application entry point
│   ├── lib.rs              # Main library code
│   ├── commands/           # Tauri commands
│   └── models/             # Data models
├── Cargo.toml              # Rust dependencies
└── tauri.conf.json         # Tauri configuration
```

## Adding New Features

When adding new features:

1. Create components in appropriate directories
2. Update stores if needed
3. Add backend functionality in Rust if required
4. Register new commands in the Tauri builder
5. Add types for data shared between frontend and backend

## Component Structure

Svelte components should follow this organization:

```svelte
<script lang="ts">
  // Imports
  // Props
  // Local state
  // Reactive statements
  // Functions
  // Lifecycle hooks
</script>

<!-- Template -->

<style>
  /* Component styles */
</style>
